This paper uses `Video` as a running example to illustrate the Racket tower of languages.

We failed to address the interactive nature of Video, as well as its limitations. The revised paper will contain an expanded Section 7 that covers Video's REPL-like interface, real-time previews, and gives more details on the graphical NLVEs.

The paper also conflated `run-time primitives` and `linguistic constructs`. We will disambiguate them in the prose. Run-time primitives are data without any specific syntax, such as producers. Linguistic constructs have their own syntax, such as new binding forms.

Next, we gave the impression that Video is tied to DrRacket in a similar fashion to how other NLVE extensions are tied specifically to their tool. Video is different in 2 ways that we will address. First, while Video programmers benefit from using DrRacket, they can write Video files in any editor. Second, Video programs are parametric over the implementation of Video. The implementation presented in this paper used an external library for rendering, but the renderer can be replaced with a functional one and Video programs would still work. In fact, early prototypes of Video used two independent renderers. We will discuss this in the prose.

Additionally, there are concern about the type system missing judgments. To address this, we will add the missing rules to figure 8 to match the code in figure 9.

Finally, some reviewers were concerned about the presentation in our related work section. We will refine the prose to make it more inline with the requirements of a pearl.

We are grateful to the reviewers for the expansive and detailed suggestions on how to improve our pearl.

--------------------------------------

Addendum: All of the reviewers gave comments on prose improvements. We thank the reviewers for their effort and will incorporate their suggestions.
